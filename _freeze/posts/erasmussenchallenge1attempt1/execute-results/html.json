{
  "hash": "4825f2441673d69b8e599a7cce351a4f",
  "result": {
    "markdown": "---\ntitle: \"Challenge 1 Attempt\"\nauthor: \"Emma Rasmuussen\"\ndesription: \"Reading in data and creating a post\"\ndate: \"08/15/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\nBelow is a preview of the data set \"railroad_2012_clean_county\"\n\n*****One of our tutorials says im not supposed to change the working directory in a script but my render would not go through without this in script (even if it was in my console)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrailroad_2012_clean_county <- read_csv(\"_data/railroad_2012_clean_county.csv\")\nView(railroad_2012_clean_county)\nhead(railroad_2012_clean_county)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  state county               total_employees\n  <chr> <chr>                          <dbl>\n1 AE    APO                                2\n2 AK    ANCHORAGE                          7\n3 AK    FAIRBANKS NORTH STAR               2\n4 AK    JUNEAU                             3\n5 AK    MATANUSKA-SUSITNA                  2\n6 AK    SITKA                              1\n```\n:::\n:::\n\n\nThis data set looks at the number of employees working at railroads across different U.S. counties in 2012. The data set includes states, counties, and the total number of employees. The data was most likely gathered from government employment records, or from the the railroads directly. The U.S. Department of Transportation may have gathered this data, or gathers other data like this. The data set has three columns, one for each state, county, and the number of employees at railroads. The data set has 2,930 rows, one for each county (I assume it only includes U.S. county's with railroads, as Google says there are 3,006 counties in the U.S., but only 2,920 counties in the data set). The cases are counties, and number of employees is the variable that changes across counties.\n\nThere is data taken from 53 states/territories:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrailroad_2012_clean_county%>% #Using the pipeline command to apply future commands to this data\n  group_by(state)%>% #Grouping the data by state\n  slice(1) #slicing the data so there is one unique state per row/no duplicate states\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 3\n# Groups:   state [53]\n   state county        total_employees\n   <chr> <chr>                   <dbl>\n 1 AE    APO                         2\n 2 AK    ANCHORAGE                   7\n 3 AL    AUTAUGA                   102\n 4 AP    APO                         1\n 5 AR    ARKANSAS                   11\n 6 AZ    APACHE                    270\n 7 CA    ALAMEDA                   346\n 8 CO    ADAMS                     553\n 9 CT    FAIRFIELD                 486\n10 DC    WASHINGTON DC             279\n# … with 43 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\n#there are 53 rows in our sliced data set, there should be 53 unique states/territories included in this data set(ex: AE/APO is likely referring to railroads located at military addresses)\n```\n:::\n\n\nThere are 255,432 employees of U.S. Railroads, according to our data set (if the code below is correct):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(railroad_2012_clean_county, sum(total_employees))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  `sum(total_employees)`\n                   <dbl>\n1                 255432\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#This code arranges the data set by the number of employees at each railroad, from greatest to least\narrange(railroad_2012_clean_county, desc(total_employees))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,930 × 3\n   state county           total_employees\n   <chr> <chr>                      <dbl>\n 1 IL    COOK                        8207\n 2 TX    TARRANT                     4235\n 3 NE    DOUGLAS                     3797\n 4 NY    SUFFOLK                     3685\n 5 VA    INDEPENDENT CITY            3249\n 6 FL    DUVAL                       3073\n 7 CA    SAN BERNARDINO              2888\n 8 CA    LOS ANGELES                 2545\n 9 TX    HARRIS                      2535\n10 NE    LINCOLN                     2289\n# … with 2,920 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nThe mean number of employees at all railroads in the data set is 87.2 employees, but there is a very large standard deviation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(railroad_2012_clean_county, mean(total_employees), sd(total_employees))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  `mean(total_employees)` `sd(total_employees)`\n                    <dbl>                 <dbl>\n1                    87.2                  284.\n```\n:::\n:::\n\n\nThe minimum number of employees at any railroad is 1. The maximum number of employees is 8,207:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(railroad_2012_clean_county, max=max(total_employees), min=min(total_employees))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n    max   min\n  <dbl> <dbl>\n1  8207     1\n```\n:::\n:::\n\n\nSince there is such a wide range of employee numbers based on the county, it is worth finding the median number of employees to get a clearer picture of what is going on. This paints a very different picture than when compared to the median.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(railroad_2012_clean_county, median(total_employees))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  `median(total_employees)`\n                      <dbl>\n1                        21\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}